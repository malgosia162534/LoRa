//
// Generated file, do not edit! Created by nedtool 5.0 from loraPck.msg.
//

#ifndef __LORAPCK_M_H
#define __LORAPCK_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0500
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>loraPck.msg:19</tt> by nedtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * packet LoraPck
 * {
 *     int nodeId;
 *     int packetLength;
 *     double distance;
 *     double ToA;
 *     int spreadingFactor;
 *     int bandwidth;
 *     int gatewayID;
 *     simtime_t rectime;
 *     simtime_t arrivalTime;
 *     double rssi;
 *     int frequency;
 *     bool requireACK;
 *     bool colllided;
 *     bool processed;
 *     bool lost;
 * }
 * </pre>
 */
class LoraPck : public ::omnetpp::cPacket
{
  protected:
    int nodeId;
    int packetLength;
    double distance;
    double ToA;
    int spreadingFactor;
    int bandwidth;
    int gatewayID;
    ::omnetpp::simtime_t rectime;
    ::omnetpp::simtime_t arrivalTime;
    double rssi;
    int frequency;
    bool requireACK;
    bool colllided;
    bool processed;
    bool lost;

  private:
    void copy(const LoraPck& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const LoraPck&);

  public:
    LoraPck(const char *name=nullptr, int kind=0);
    LoraPck(const LoraPck& other);
    virtual ~LoraPck();
    LoraPck& operator=(const LoraPck& other);
    virtual LoraPck *dup() const {return new LoraPck(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual int getNodeId() const;
    virtual void setNodeId(int nodeId);
    virtual int getPacketLength() const;
    virtual void setPacketLength(int packetLength);
    virtual double getDistance() const;
    virtual void setDistance(double distance);
    virtual double getToA() const;
    virtual void setToA(double ToA);
    virtual int getSpreadingFactor() const;
    virtual void setSpreadingFactor(int spreadingFactor);
    virtual int getBandwidth() const;
    virtual void setBandwidth(int bandwidth);
    virtual int getGatewayID() const;
    virtual void setGatewayID(int gatewayID);
    virtual ::omnetpp::simtime_t getRectime() const;
    virtual void setRectime(::omnetpp::simtime_t rectime);
    virtual ::omnetpp::simtime_t getArrivalTime() const;
    virtual void setArrivalTime(::omnetpp::simtime_t arrivalTime);
    virtual double getRssi() const;
    virtual void setRssi(double rssi);
    virtual int getFrequency() const;
    virtual void setFrequency(int frequency);
    virtual bool getRequireACK() const;
    virtual void setRequireACK(bool requireACK);
    virtual bool getColllided() const;
    virtual void setColllided(bool colllided);
    virtual bool getProcessed() const;
    virtual void setProcessed(bool processed);
    virtual bool getLost() const;
    virtual void setLost(bool lost);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const LoraPck& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, LoraPck& obj) {obj.parsimUnpack(b);}


#endif // ifndef __LORAPCK_M_H

