#ifndef __LORA_END_DEVICE_H_
#define __LORA_END_DEVICE_H_

#include <omnetpp.h>
#include <math.h>

using namespace omnetpp;

namespace lora {

class EndDevice: public cSimpleModule {
private:
    // Packet parameters
    double ToA; // Time on Air value for a single packet
    int NP; // number of preamble symbols
    int SW; // length of synchronization word
    int PL; // number of PHY payload BYTES
    int CRC; // specify the presence of CRC
    int IH; // specify the presence of PHY header
    int DE;  // specify usage of data rate optimization
    double CR; //coding rate

    int SF; // spreading factor
    int BW;
    int DR; // dataRate depends on Spreading Factor and bandwidth

    // Modules
    cModule *gateway;
    cModule *endDevice;

    // Messages for Class A
    cMessage *payloadData; // message send to gateway from EndDevice

    // Receive windows
    simtime_t receiveWindow1;
    simtime_t receiveWindow2;

    //In EU 863-870MHz ISM Band there are 3 default channels.
    // We will assign channel (868.10, 868.30, 868.50) to specific End Device.
    double channelNumber;

    // Number of messages sent.
    int numberOfSentMessages;

    // Inter Arrival Time - time between messages
    cPar * iaTime;

    //State of the EndDevice
    enum {
        IDLE = 0, BUSY = 1, TRANSMIITTING = 2
    } stateED;
    // Boolean value whether End Device received ACK.
    bool gotACK;

public:
    /*  EndDevice();
     virtual ~EndDevice();*/
    //Function to calculate Time on Air for each packet generated by EndDevice.
    // Returns double value in ms
    double timeOnAir();
    double tOffset();

protected:
    // Initialize is called at the beginning of the simulation.
    // To bootstrap the process, one of the modules needs
    // to send the first message. In our case it will be EndDevice.
    virtual void initialize() override;

    // The handleMessage() method is called whenever a message arrives
    // at the module.
    virtual void handleMessage(cMessage *msg) override;
    simtime_t getNextTransmissionTime();
    virtual void refreshDisplay() const override;
};

}
;
//namespace

#endif

