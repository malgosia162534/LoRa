#ifndef __LORA_END_DEVICE_H_
#define __LORA_END_DEVICE_H_

#include <omnetpp.h>
#include <math.h>
#include <time.h>
#include <string.h>
#include <loraPck_m.h>
#include <loraChannel.h>
using namespace omnetpp;

namespace lora {

class EndDevice: public cSimpleModule {
private:
    // Packet parameters
    double ToA;
    int NPream;
    int packetSize;
    int CR;
    int IH;
    int DE;

    //Parameters from LoRa ini file
    int SF; // spreading factor
    int BW;

    // Position of EndDevice
    int posX;
    int posY;

    //Log-shadow variables
    double txPow; // transmission power
    int GL;
    double gamma;
    double d0;
    double LpLd0;
    double Lp1;
    double Prx;
    double minsensitivity;

    // Modules
    cModule *gateway;
    int numGateways;

    // Messages for Class A
    cMessage *payloadData; // message send to gateway from EndDevice
    cMessage *sentMessageNoAck;
    cMessage *sentMessageAck;

    // Receive windows
    simtime_t receiveWindow1;
    simtime_t receiveWindow2;

    // Number of messages sent.
    int numberOfSentMessages;
    //Number of lost messages.
    int numberOfLostMessages;

    //Time of last packet sent on channel
    simtime_t lastPacketCH1;
    simtime_t lastPacketCH2;
    simtime_t lastPacketCH3;

    // Inter Arrival Time - time between messages
    cPar * iaTime;
    int frequency;
    int channelNumber;
    //State of the EndDevice
    enum {
        IDLE = 0, BUSY = 1, TRANSMITTING = 2
    } stateCH1, stateCH2, stateCH3;

    // Boolean value whether End Device received ACK.
    bool gotACK;
    bool gotACKCH1;
    bool gotACKCH2;
    bool gotACKCH3;

    bool firstMsg;

    //Statistics parameters
    simsignal_t CH1state;
    simsignal_t usedChannel;
    simsignal_t Sentmessages;
    simsignal_t Lostmessages;

    loraChannel channel1;
    loraChannel channel2;
    loraChannel channel3;
public:
    double dutyCycle();
    LoraPck* setPacket();
    //Function to calculate Time on Air for each packet generated by EndDevice.
    // Returns double value in ms
    double airtime(int sf, int cr, int pl, int bw);
    double distanceToGW(int x, int y);
    bool checkRSSI(LoraPck *pkt, double distance);
    int chooseChannel();

protected:
    // Initialize is called at the beginning of the simulation.
    // To bootstrap the process, one of the modules needs
    // to send the first message. In our case it will be EndDevice.
    virtual void initialize() override;
    void manageMessage(loraChannel channel);
    // The handleMessage() method is called whenever a message arrives
    // at the module.
    virtual void handleMessage(cMessage *msg) override;
    simtime_t getNextTransmissionTime();
    virtual void refreshDisplay() const override;
    virtual void finish() override;

};

}
;
//namespace

#endif

